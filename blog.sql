/*
 Navicat Premium Data Transfer

 Source Server         : xm
 Source Server Type    : MySQL
 Source Server Version : 50725
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50725
 File Encoding         : 65001

 Date: 26/02/2019 22:01:42
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(12) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章标题',
  `tag` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章关键词',
  `desc` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '文章描述',
  `thumb` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '缩略图',
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `datetime` int(12) NOT NULL COMMENT '发布时间',
  `views` int(12) NOT NULL DEFAULT 0 COMMENT '浏览量',
  `reply` int(12) NOT NULL DEFAULT 0,
  `original` tinyint(1) NOT NULL DEFAULT 0,
  `cate_id` int(12) UNSIGNED NULL DEFAULT NULL COMMENT '父分类id',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `pub_time`(`datetime`) USING BTREE,
  INDEX `pub_time_2`(`datetime`) USING BTREE,
  INDEX `pub_time_3`(`datetime`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, 'laravel dingo-api/jwt-auth 配置', 'php', 'php laravel 框架配合 dingo-api 做前后端分离，配合 jwt-auth 做用户登录认证', NULL, '<h3>1. 安装laravel</h3><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">composer create-project --prefer-dist laravel/laravel server 5.1.*</span></div><div><br></div><h3>2. 配置laravel数据库连接，dingo api/ jwt-auth</h3><div><b>&nbsp; &nbsp; &nbsp; &nbsp; 安装dingo api/ jwt-auth</b><br></div><div><span style=\"white-space:pre\">	</span>composer.json 文件 require 添加如下依赖：</div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">\"dingo/api\": \"1.0.*@dev\",</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"background-color: rgb(204, 255, 255);\">\"tymon/jwt-auth\": \"0.5.*\"</span></div><div><span style=\"white-space:pre\">	</span>到项目目录执行 composer update；</div><div><span style=\"white-space:pre\">	</span>或者执行命令 composer require dingo/api:1.0.x@dev, composer require tymon/jwt-auth:0.5.*。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src=\'http://www.qianlin.com/upload/article/1/20180228025404483.jpeg\'><br></div><div><br></div><div><span style=\"white-space:pre\">	</span><b>1). 配置dingo api</b></div><div><span style=\"white-space:pre\">	</span>在config/app.php中注册服务提供者到providers数组：</div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">Dingo\\Api\\Provider\\LaravelServiceProvider::class</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 在config/app.php中添加门面到aliases数组:<span style=\"background-color: rgb(204, 255, 255);\"><br></span></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style=\"background-color: rgb(204, 255, 255);\">\'APIRoute\'&nbsp; =&gt; Dingo\\Api\\Facade\\Route::class&nbsp; &nbsp; 或者&nbsp; &nbsp;&nbsp;</span><span style=\"background-color: rgb(204, 255, 255);\">\'API\' =&gt; Dingo\\Api\\Facade\\API::class,</span>&nbsp; 二选一；</div><div><span style=\"white-space:pre\">	</span>执行<span style=\"background-color: rgb(204, 255, 255);\">php artisan vendor:publish --provider=\"Dingo\\Api\\Provider\\LaravelServiceProvider\"</span>生成config/api.php</div><div><br></div><div><span style=\"white-space:pre\">	</span><b>2). 配置jwt-auth</b></div><div><span style=\"white-space:pre\">	</span>在config/app.php中注册服务提供者到providers数组：</div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">Tymon\\JWTAuth\\Providers\\JWTAuthServiceProvider::class</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 在config/app.php中添加门面到aliases数组：</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style=\"background-color: rgb(204, 255, 255);\">\'JWTAuth\'&nbsp; &nbsp;=&gt; Tymon\\JWTAuth\\Facades\\JWTAuth::class,</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"background-color: rgb(204, 255, 255);\">\'JWTFactory\'=&gt; Tymon\\JWTAuth\\Facades\\JWTFactory::class,</span><br></div><div><span style=\"white-space:pre\">	</span>执行 <span style=\"background-color: rgb(204, 255, 255);\">php artisan vendor:publish -- provider = \"Tymon\\JWTAuth\\Providers\\JWTAuthServiceProvider\"</span> 生成 config/jwt.php</div><div><span style=\"white-space:pre\">	</span>执行 php artisan jwt:generate 生成 JWT_SECRET</div><div><span style=\"white-space:pre\">	</span>kernel添加中间键：</div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">\'jwt.auth\' =&gt; \\Tymon\\JWTAuth\\Middleware\\GetUserFromToken::class,</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"background-color: rgb(204, 255, 255);\">\'jwt.refresh\' =&gt; \\Tymon\\JWTAuth\\Middleware\\RefreshToken::class,</span></div><div><span style=\"white-space:pre\">	</span></div><div><span style=\"white-space:pre\">	</span><b>3).&nbsp; .evn添加code</b></div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">API_STANDARDS_TREE=vnd</span></div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">API_PREFIX=api</span></div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">API_VERSION=v1</span></div><div><span style=\"white-space:pre\">	</span><span style=\"background-color: rgb(204, 255, 255);\">API_DEBUG=true</span></div><div><br></div><div><span style=\"white-space:pre\">	</span><b>4)修改config配置文件指向路径</b></div><div><span style=\"white-space:pre\">	</span>jwt.php中的 user&nbsp;改为模型User的路径；</div><div><span style=\"white-space:pre\">	</span>jwt.php中的 identifier 改为user数据表的id键；</div><div><span style=\"white-space:pre\">	</span>auth.php中的model 改为模型User的路径；</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src=\'http://www.qianlin.com/upload/article/1/20180228030940707.jpeg\'><br></div><div><br></div><div><b style=\"\"><font color=\"#ff0000\">注意：</font></b>jwt-auth配置完成后，访问经过jwt中间键的路径进行安全操作时，如果把token值放入到headers中，返回值这时候是 \'token_not_provided\'，是因为 JWTAuth.php 中 的 parseToken&nbsp;未获取headers中的token值，处理方法可以将判断条件：</div><div>! $token = $this-&gt;request-&gt;query($query, false)</div><div>修改成：</div><div>! $token = $this-&gt;request-&gt;query($query, false) ? $this-&gt;request-&gt;query($query, false) : $this-&gt;request-&gt;headers-&gt;get(\'token\')<br></div>', 1511945901, 1, 0, 1, 1);
INSERT INTO `article` VALUES (2, 'Promise 延时执行', 'javascript', '', '', '<div><span class=\"hljs-keyword\">&nbsp; &nbsp; &nbsp;在javascript的世界中，所有代码都是单线程的，由于这个“缺陷”，导致JavaScript的所有网络操作，浏览器事件，都必须是异步执行，而其它命令并不会等待异步执行完毕再执行。</span></div><div><span class=\"hljs-keyword\">&nbsp; &nbsp; &nbsp;但在项目中，我们经常会遇到需要等待异步执行完再操作的情况。这个时候可以使用回调，然后回调有时候并不是那么方便，比如将回调函数写在ajax异步操作中，不仅不好看，而且不利于代码复用。这时我们就可以使用promise了，它就可以很好的解决这个问题。</span></div><div><span class=\"hljs-keyword\"><br></span></div><div><span class=\"hljs-keyword\">promise&nbsp;一般用于等待一个请求或多个请求执行完毕后，执行另一条命令，</span></div><div><br></div><div>当发起请求时，生成延时对象，等待其它事件执行</div><div><div style=\"color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div><span style=\"color: #66d9ef;font-style: italic;\">var</span> promise <span style=\"color: #f92672;\">=</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Promise</span>(<span style=\"color: #66d9ef;font-style: italic;\">function</span>(<span style=\"color: #fd971f;font-style: italic;\">resolve</span>, <span style=\"color: #fd971f;font-style: italic;\">reject</span>) {</div><div>     <span style=\"color: #f92672;\">if</span> (<span style=\"color: #75715e;\">/* 异步操作成功 */</span>){</div><div>           <span style=\"color: #a6e22e;\">resolve</span>(value);</div><div>     }<span style=\"color: #f92672;\">else</span>{</div><div>           <span style=\"color: #a6e22e;\">reject</span>(error);</div><div>     }</div><div>});</div></div></div><div><br></div>请求完成，可以执行其它事件：<div><div style=\"color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div>promise.<span style=\"color: #a6e22e;\">then</span>(() <span style=\"color: #66d9ef;font-style: italic;\">=&gt;</span> {</div><div>     <span style=\"color: #75715e;\">//success</span></div><div>}).<span style=\"color: #a6e22e;\">catch</span>(() <span style=\"color: #66d9ef;font-style: italic;\">=&gt;</span> {</div><div>     <span style=\"color: #75715e;\">//error</span></div><div>});</div></div></div><div><br></div><div>发起多个请求，只需要对抓取不同的延时对象，并将它们加入延时列表：</div><div><div style=\"color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div><span style=\"color: #66d9ef;font-style: italic;\">let p1, p2, p3;</span></div><div>p1 <span style=\"color: #f92672;\">=</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Promise</span>(<span style=\"color: #66d9ef;font-style: italic;\">function</span>(<span style=\"color: #fd971f;font-style: italic;\">resolve</span>, <span style=\"color: #fd971f;font-style: italic;\">reject</span>) {</div><div>     <span style=\"color: #f92672;\">if</span> (<span style=\"color: #75715e;\">/* 异步操作成功 */</span>){</div><div>           <span style=\"color: #a6e22e;\">resolve</span>(callback1);</div><div>     }<span style=\"color: #f92672;\">else</span>{</div><div>           <span style=\"color: #a6e22e;\">reject</span>(error);</div><div>     }</div><div>});</div><div>p2 <span style=\"color: #f92672;\">=</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Promise</span>(<span style=\"color: #66d9ef;font-style: italic;\">function</span>(<span style=\"color: #fd971f;font-style: italic;\">resolve</span>, <span style=\"color: #fd971f;font-style: italic;\">reject</span>) {</div><div>     <span style=\"color: #f92672;\">if</span> (<span style=\"color: #75715e;\">/* 异步操作成功 */</span>){</div><div>           <span style=\"color: #a6e22e;\">resolve</span>(callback1);</div><div>     }<span style=\"color: #f92672;\">else</span>{</div><div>           <span style=\"color: #a6e22e;\">reject</span>(error);</div><div>     }</div><div>});</div><div>p2 <span style=\"color: #f92672;\">=</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Promise</span>(<span style=\"color: #66d9ef;font-style: italic;\">function</span>(<span style=\"color: #fd971f;font-style: italic;\">resolve</span>, <span style=\"color: #fd971f;font-style: italic;\">reject</span>) {</div><div>     <span style=\"color: #f92672;\">if</span> (<span style=\"color: #75715e;\">/* 异步操作成功 */</span>){</div><div>           <span style=\"color: #a6e22e;\">resolve</span>(callback1);</div><div>     }<span style=\"color: #f92672;\">else</span>{</div><div>           <span style=\"color: #a6e22e;\">reject</span>(error);</div><div>     }</div><div>});</div></div></div><div><br></div><div><div style=\"color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div><span style=\"color: #66d9ef;font-style: italic;\">var</span> promise <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;font-style: italic;\">Promise</span>.<span style=\"color: #a6e22e;\">all</span>( [p1, p2, p3] );</div><div>promise.<span style=\"color: #a6e22e;\">then</span>((<span style=\"color: #fd971f;font-style: italic;\">datas</span>) <span style=\"color: #66d9ef;font-style: italic;\">=&gt;</span> {</div><div>     <span style=\"color: #75715e;\">//do something</span></div><div>});</div></div></div><div><span style=\"background-color: rgb(204, 255, 255);\"><br></span></div><div>其中datas即为[callback1, callback2, callback3]</div>', 1519052453, 2, 0, 1, 1);
INSERT INTO `article` VALUES (3, '活动倒计时', 'javascript', '自制的倒计时方法', '', '很多时候公司有些活动需要计算倒计时天数，正面这个方法可以轻松实现。<div><br></div><div><div style=\"background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div style=\"color: rgb(248, 248, 242);\"><span style=\"color: #66d9ef;font-style: italic;\">function</span> <span style=\"color: #a6e22e;\">setTimer</span>(<span style=\"color: #fd971f;font-style: italic;\">el</span>, <span style=\"color: #fd971f;font-style: italic;\">endtime</span>, <span style=\"color: #fd971f;font-style: italic;\">starttime</span>){</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> date <span style=\"color: #f92672;\">=</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Date</span>(endtime);                               <span style=\"color: #75715e;\">//目标时间</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> now <span style=\"color: #f92672;\">=</span> starttime <span style=\"color: #f92672;\">?</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Date</span>(starttime) <span style=\"color: #f92672;\">:</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Date</span>();</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> diff <span style=\"color: #f92672;\">=</span> ( <span style=\"color: #66d9ef;font-style: italic;\">Date</span>.<span style=\"color: #66d9ef;\">parse</span>(date) <span style=\"color: #f92672;\">-</span> <span style=\"color: #66d9ef;font-style: italic;\">Date</span>.<span style=\"color: #66d9ef;\">parse</span>(now) ) <span style=\"color: #f92672;\">/</span> <span style=\"color: #ae81ff;\">1000</span>;   <span style=\"color: #75715e;\">//时间差</span></div><font color=\"#f8f8f2\"><br></font><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">function</span> <span style=\"color: #a6e22e;\">getTimeShow</span>(){                                     <span style=\"color: #75715e;\">//显示时间</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> d <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;\">Math</span>.<span style=\"color: #66d9ef;\">floor</span>(diff <span style=\"color: #f92672;\">/</span> (<span style=\"color: #ae81ff;\">24</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span>));</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> d <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;\">Math</span>.<span style=\"color: #66d9ef;\">floor</span>(diff <span style=\"color: #f92672;\">/</span> (<span style=\"color: #ae81ff;\">24</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span>));              <span style=\"color: #75715e;\">//天</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> h <span style=\"color: #f92672;\">=</span> diff <span style=\"color: #f92672;\">%</span> (<span style=\"color: #ae81ff;\">24</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span>);                          <span style=\"color: #75715e;\">//小时</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> m <span style=\"color: #f92672;\">=</span> h <span style=\"color: #f92672;\">%</span> (<span style=\"color: #ae81ff;\">60</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span>);                                  <span style=\"color: #75715e;\">//分</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> s <span style=\"color: #f92672;\">=</span> m <span style=\"color: #f92672;\">%</span> <span style=\"color: #ae81ff;\">60</span>;                                         <span style=\"color: #75715e;\">//秒</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;\">Math</span>.<span style=\"color: #66d9ef;\">floor</span>(h <span style=\"color: #f92672;\">/</span> (<span style=\"color: #ae81ff;\">60</span> <span style=\"color: #f92672;\">*</span> <span style=\"color: #ae81ff;\">60</span>));                          <span style=\"color: #75715e;\">//最终小时</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;\">Math</span>.<span style=\"color: #66d9ef;\">floor</span>(m <span style=\"color: #f92672;\">/</span> <span style=\"color: #ae81ff;\">60</span>);                                 <span style=\"color: #75715e;\">//最终分钟</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span> d <span style=\"color: #f92672;\">+</span> <span style=\"color: #e6db74;\">\"天\"</span> <span style=\"color: #f92672;\">+</span> h <span style=\"color: #f92672;\">+</span> <span style=\"color: #e6db74;\">\"小时\"</span> <span style=\"color: #f92672;\">+</span> m <span style=\"color: #f92672;\">+</span> <span style=\"color: #e6db74;\">\"分\"</span> <span style=\"color: #f92672;\">+</span> s <span style=\"color: #f92672;\">+</span> <span style=\"color: #e6db74;\">\"秒\"</span>;</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;}</div><font color=\"#f8f8f2\"><br></font><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">if</span>(diff <span style=\"color: #f92672;\">&gt;</span> <span style=\"color: #ae81ff;\">0</span>){</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el.innerHTML <span style=\"color: #f92672;\">=</span> <span style=\"color: #a6e22e;\">getTimeShow</span>();</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> timer <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;\">setInterval</span>(<span style=\"color: #66d9ef;font-style: italic;\">function</span>(){</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">if</span>(diff <span style=\"color: #f92672;\">&lt;=</span> <span style=\"color: #ae81ff;\">0</span>){</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #75715e;\">//活动已结束</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span>;</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff <span style=\"color: #f92672;\">-=</span> <span style=\"color: #ae81ff;\">1</span>;</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el.innerHTML <span style=\"color: #f92672;\">=</span> <span style=\"color: #a6e22e;\">getTimeShow</span>();</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<span style=\"color: #ae81ff;\">1000</span>);</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;}<span style=\"color: #f92672;\">else</span>{</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #75715e;\">//活动已结束</span></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style=\"color: rgb(248, 248, 242);\">}</div><div style=\"\"><div style=\"line-height: 22px;\"><font color=\"#f8f8f2\"><br></font><div style=\"\"><span style=\"color: rgb(102, 217, 239); font-style: italic;\">var</span><font color=\"#f8f8f2\"> container </font><span style=\"color: rgb(249, 38, 114);\">=</span><font color=\"#f8f8f2\"> document.</font><span style=\"color: rgb(102, 217, 239);\">querySelector</span><font color=\"#f8f8f2\">(</font><font color=\"#e6db74\">\'el\'</font><font color=\"#f8f8f2\">);          </font><span style=\"color: rgb(117, 113, 94);\">//el为显示倒计时时间窗口标签</span></div><div style=\"color: rgb(248, 248, 242);\"><span style=\"color: #a6e22e;\">setTimer</span>(container, <span style=\"color: #e6db74;\">\"month day,year 00:00:00\"</span>);</div></div></div></div></div>', 1519872276, 1, 0, 1, 1);
INSERT INTO `article` VALUES (4, 'jsonp 实现请求跨域', 'javascript', '3种不同的方法解决项目中遇到的跨域问题', '', '跨域问题在面试中是一个老生常谈的问题。当你通过ajax请求的地址跟当前地址域名不同时，就会出现：<div><font color=\"#009900\">No \'Access-Control-Allow-Origin\' header，&nbsp;</font><font color=\"#009900\">not allowed access</font>。不允许跨域访问。</div><div>有这种情况就总会有解决办法。而且还不止一种。但是都需要后台做配合，而且这些方法都有一个缺陷，就是必须采用get方式请求。<br></div><div><br></div><h4>1、插入式：</h4>&nbsp; &nbsp; &nbsp;还记得我们在用 <font color=\"#009900\">link</font> 或者 <font color=\"#009900\">src</font> 来引入 <font color=\"#009900\">css</font> 或 <font color=\"#009900\">js</font> 时，我们发现就算不同域也能访问，没错，这是一种解决方法。利用这一点，我们可以动态插入script标签。<div><br><div>js部分：</div><div><div style=\"color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div><span style=\"color: #66d9ef;font-style: italic;\">function</span> <span style=\"color: #a6e22e;\">handle</span>(<span style=\"color: #fd971f;font-style: italic;\">res</span>){</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">console</span>.<span style=\"color: #66d9ef;\">log</span>(res);</div><div>}</div><div>window.<span style=\"color: #a6e22e;\">onload</span> <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;font-style: italic;\">function</span>() {    </div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">var</span> script <span style=\"color: #f92672;\">=</span> document.<span style=\"color: #66d9ef;\">createElement</span>(<span style=\"color: #e6db74;\">\"script\"</span>);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;script.src <span style=\"color: #f92672;\">=</span> <span style=\"color: #e6db74;\">\"http://www.qianlin.com/test?callback=handle\"</span>;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;document.body.<span style=\"color: #66d9ef;\">insertBefore</span>(script, document.body.firstChild);</div><div>}</div></div></div></div><div><br></div><div>php部分：</div><div><pre style=\"background-color:#272822;color:#f8f8f2;font-family:\'Source Code Pro\';font-size:12.0pt;\"><span style=\"background-color:#472c47;\">$datas</span> <span style=\"color:#f92672;\">= </span>[<br>    <span style=\"color:#e6db74;\">\'name\' </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#e6db74;\">\'</span><span style=\"color:#e6db74;font-family:\'宋体\';\">张三</span><span style=\"color:#e6db74;\">\'</span>,<br>    <span style=\"color:#e6db74;\">\'age\' </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#e6db74;\">\'20\'</span>,<br>    <span style=\"color:#e6db74;\">\'birthday\' </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#e6db74;\">\'1997.5.10\'<br></span>];<br>$callback <span style=\"color:#f92672;\">= </span>$_GET[<span style=\"color:#e6db74;\">\'callback\'</span>];<br><span style=\"color:#f92672;\">return </span>$callback<span style=\"color:#f92672;\">.</span><span style=\"color:#e6db74;\">\'(\'</span><span style=\"color:#f92672;\">.</span><span style=\"color:#a6e22e;\">json_encode</span>(<span style=\"background-color:#3c3c57;\">$datas</span>)<span style=\"color:#f92672;\">.</span><span style=\"color:#e6db74;\">\')\'</span>;</pre></div><div><font color=\"#009900\">注意：后台部分需要接收到一个callback参数，利用它才能返回到数据。</font></div><div><br></div><h4>2、ajax请求：</h4><div>用jquery已封装好的ajax请求数据，php代码跟第一种方法一样，只是请求方式不一样。</div><div><br></div><div><div style=\"color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div>$.<span style=\"color: #a6e22e;\">ajax</span>({</div><div>&nbsp;&nbsp;&nbsp;&nbsp;type : <span style=\"color: #e6db74;\">\'get\'</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;url : <span style=\"color: #e6db74;\">\'http://www.qianlin.com/test\'</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;dataType : <span style=\"color: #e6db74;\">\'jsonp\'</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;jsonp : <span style=\"color: #e6db74;\">\'callback\'</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #a6e22e;\">success</span> : <span style=\"color: #66d9ef;font-style: italic;\">function</span>(<span style=\"color: #fd971f;font-style: italic;\">res</span>){</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #66d9ef;font-style: italic;\">console</span>.<span style=\"color: #66d9ef;\">log</span>(res);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #a6e22e;\">error</span> : <span style=\"color: #66d9ef;font-style: italic;\">function</span>(<span style=\"color: #fd971f;font-style: italic;\">err</span>){</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>});</div></div></div><div><br></div><h4>3、使用jsonp插件请求：</h4><div>这种方法跟上面一种方法基本一样，请求方式一样，php代码也一样。</div><div><br></div><div>1).jsonp安装：&nbsp;<span style=\"background-color: rgb(240, 240, 240); color: rgb(77, 77, 77); font-family: &quot;Courier New&quot;, monospace; font-size: 16px; white-space: pre;\">$&nbsp;npm&nbsp;install&nbsp;jsonp</span>;</div><div>2).jsonp引入：<span style=\"color: rgb(249, 38, 114); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; white-space: pre;\">import </span><font color=\"#f8f8f2\" face=\"Consolas, Courier New, monospace\"><span style=\"font-size: 16px; white-space: pre; background-color: rgb(39, 40, 34);\">jsonp </span></font><span style=\"color: rgb(249, 38, 114); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; white-space: pre;\">from</span><font color=\"#f8f8f2\" face=\"Consolas, Courier New, monospace\"><span style=\"font-size: 16px; white-space: pre; background-color: rgb(39, 40, 34);\">\'</span></font><span style=\"color: rgb(230, 219, 116); background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; white-space: pre;\">jsonp</span><font color=\"#f8f8f2\" face=\"Consolas, Courier New, monospace\"><span style=\"font-size: 16px; white-space: pre; background-color: rgb(39, 40, 34);\">\'</span></font>；<br></div><div>3).使用：</div><div><div style=\"background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div style=\"\"><font color=\"#fd971f\">jsonp</font><font color=\"#f8f8f2\">(</font><font color=\"#fd971f\">url</font><font color=\"#f8f8f2\">, </font><span style=\"color: rgb(174, 129, 255);\">null</span><font color=\"#f8f8f2\">, (</font><span style=\"color: rgb(253, 151, 31); font-style: italic;\">err</span><font color=\"#f8f8f2\">, </font><span style=\"color: rgb(253, 151, 31); font-style: italic;\">res</span><font color=\"#f8f8f2\">) </font><span style=\"color: rgb(102, 217, 239); font-style: italic;\">=&gt;</span><font color=\"#f8f8f2\"> {</font></div><div style=\"color: rgb(248, 248, 242);\">    <span style=\"color: #f92672;\">if</span>(err){</div><div style=\"color: rgb(248, 248, 242);\">        <span style=\"color: rgb(102, 217, 239); font-style: italic;\">console</span>.<span style=\"color: rgb(102, 217, 239);\">log</span>(err);</div><div style=\"color: rgb(248, 248, 242);\">    }<span style=\"color: #f92672;\">else</span>{</div><div style=\"color: rgb(248, 248, 242);\">        <span style=\"color: rgb(102, 217, 239); font-style: italic;\">console</span>.<span style=\"color: rgb(102, 217, 239);\">log</span>(res);</div><div style=\"color: rgb(248, 248, 242);\">    }</div><div style=\"color: rgb(248, 248, 242);\">});</div></div></div><div><br></div>', 1519886797, 2, 0, 1, 1);
INSERT INTO `article` VALUES (5, 'js中的 call() 和 apply() 方法', 'javascript', 'js中的 call() 和 apply() 方法的共同点和不同点', '', '<div><div>干前端这一行也有好几年了，以前面试经常会遇到面试官问 call()&nbsp;和 apply() 这两个方法的差别，每次都是在网上搜搜资料，能答上。但在项目中到底运用不熟，就用的少了，用的少就容易忘。这次把它给记下来，加强记忆，再次学习一遍。</div><div><br></div>javascript&nbsp;中，call&nbsp;和 apply 都是&nbsp;Function&nbsp;自带的方法，有共同点也有不同点。<div><br></div><div>用法：<br><div><div>call()&nbsp;的使用方法 -&gt;&nbsp;thatFn.call(thisFn, arg1, arg2, ...);&nbsp;</div><div>apply() 的使用方法 -&gt;&nbsp;thatFn.apply(thisFn, [arg1, arg2])；</div></div><div><br><h4>共同点：</h4><div>都是用另一个对象代替当前对象执行方法，即用thatFn这个方法，替代thisFn，执行thatFn方法，将一个函数的对象上下文从初始的上下文改变为由&nbsp;<font color=\"#009900\">当前对象</font>&nbsp;指定的新对象。</div></div><div><br></div><h4>不同点：</h4><div>两者所带的参数写法不一样，call是多个参数间用逗号隔开；</div><div>apply是参数以数组的方法写入方法中，也就是最多只有两个参数，另外，如果没有提供 argArray 和 thisFn 任何一个参数，那么Global对象将被用作 thisFn，并且无法被传递任何参数。<br></div></div></div><div><br></div><div>说的再多，不如举一例，下面请看例子：</div><div><div style=\"background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div style=\"color: rgb(248, 248, 242);\"><span style=\"color: #66d9ef;font-style: italic;\">function</span> <span style=\"color: #a6e22e;\">add</span>(<span style=\"color: #fd971f;font-style: italic;\">a</span>,<span style=\"color: #fd971f;font-style: italic;\">b</span>){</div><div style=\"color: rgb(248, 248, 242);\"><div style=\"line-height: 22px;\"><span style=\"color: #66d9ef;font-style: italic;\">    console</span>.<span style=\"color: #66d9ef;\">log</span>(<span style=\"color: #fd971f;\">this</span>);</div></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span> a<span style=\"color: #f92672;\">+</span>b;  </div><div style=\"color: rgb(248, 248, 242);\">}</div><div style=\"color: rgb(248, 248, 242);\"><span style=\"color: #66d9ef;font-style: italic;\">function</span> <span style=\"color: #a6e22e;\">sub</span>(<span style=\"color: #fd971f;font-style: italic;\">a</span>,<span style=\"color: #fd971f;font-style: italic;\">b</span>){</div><div style=\"color: rgb(248, 248, 242);\"><span style=\"color: rgb(102, 217, 239); font-style: italic;\">    console</span>.<span style=\"color: rgb(102, 217, 239);\">log</span>(<span style=\"color: rgb(253, 151, 31);\">this</span>);<br></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #f92672;\">return</span> a<span style=\"color: #f92672;\">-</span>b;  </div><div style=\"color: rgb(248, 248, 242);\">}</div><div style=\"\"><span style=\"color: rgb(102, 217, 239); font-style: italic;\">var</span><font color=\"#f8f8f2\"> a </font><span style=\"color: rgb(249, 38, 114);\">=</span><font color=\"#f8f8f2\"> add.</font><span style=\"color: rgb(102, 217, 239);\">call</span><font color=\"#f8f8f2\">(sub,</font><font color=\"#ae81ff\">3</font><font color=\"#f8f8f2\">,</font><span style=\"color: rgb(174, 129, 255);\">2</span><font color=\"#f8f8f2\">);　  　</font><span style=\"color: rgb(117, 113, 94);\">//sub调用add的方法，打印 fun sub()，结果a=5</span><div style=\"line-height: 22px;\"><span style=\"color: rgb(248, 248, 242);\"><span style=\"color: #66d9ef;font-style: italic;\">var</span> b <span style=\"color: #f92672;\">=</span> </span><span style=\"color: rgb(248, 248, 242);\">sub</span><span style=\"color: rgb(248, 248, 242);\">.<span style=\"color: #66d9ef;\">apply</span>(</span><span style=\"color: rgb(248, 248, 242);\">add</span><span style=\"color: rgb(248, 248, 242);\">,[</span><font color=\"#ae81ff\">3</font><font color=\"#f8f8f2\">,</font><span style=\"color: rgb(174, 129, 255);\">2</span><font color=\"#f8f8f2\">]);</font><font color=\"#f8f8f2\">　 </font><span style=\"color: rgb(117, 113, 94);\">//</span><span style=\"color: rgb(117, 113, 94);\">add</span><span style=\"color: rgb(117, 113, 94);\">调用</span><span style=\"color: rgb(117, 113, 94);\">sub</span><span style=\"color: rgb(117, 113, 94);\">的方法</span><span style=\"color: rgb(117, 113, 94);\">，打印 fun add()，结果a=1</span></div></div></div></div><div><br></div><div>另外，这两个方法还有一个作用，就是实现继承。</div><div><div style=\"background-color: rgb(39, 40, 34); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 16px; line-height: 22px; white-space: pre;\"><div style=\"\"><span style=\"color: rgb(102, 217, 239); font-style: italic;\">function</span><font color=\"#f8f8f2\"> </font><font color=\"#a6e22e\">Animal</font><font color=\"#f8f8f2\">(</font><span style=\"color: rgb(253, 151, 31); font-style: italic;\">name</span><font color=\"#f8f8f2\">){</font></div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #fd971f;\">this</span>.name <span style=\"color: #f92672;\">=</span> name;</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #fd971f;\">this</span>.<span style=\"color: #a6e22e;\">showName</span> <span style=\"color: #f92672;\">=</span> <span style=\"color: #66d9ef;font-style: italic;\">function</span>(){</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(102, 217, 239); font-style: italic;\">console</span>.<span style=\"color: rgb(102, 217, 239);\">log</span>(<span style=\"color: #fd971f;\">this</span>.name);</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style=\"color: rgb(248, 248, 242);\">}</div><div style=\"color: rgb(248, 248, 242);\"><span style=\"color: #66d9ef;font-style: italic;\">function</span> <span style=\"color: #a6e22e;\">Cat</span>(<span style=\"color: #fd971f;font-style: italic;\">name</span>){</div><div style=\"color: rgb(248, 248, 242);\">&nbsp;&nbsp;&nbsp;&nbsp;Animal.<span style=\"color: #66d9ef;\">apply</span>(<span style=\"color: #fd971f;\">this</span>, [name]);</div><div style=\"color: rgb(248, 248, 242);\">}</div><div style=\"color: rgb(248, 248, 242);\"><div><div style=\"line-height: 22px;\"><div><span style=\"color: #66d9ef;font-style: italic;\">var</span> cat <span style=\"color: #f92672;\">=</span> <span style=\"color: #f92672;\">new</span> <span style=\"color: rgb(166, 226, 46); text-decoration-line: underline;\">Cat</span>(<span style=\"color: #e6db74;\">\"Tom\"</span>);</div><div>cat.<span style=\"color: #a6e22e;\">showName</span>(); <span style=\"color: rgb(117, 113, 94);\">//继承到了Amimal的showName方法，call与之一样</span></div></div></div></div></div></div><div><br></div>', 1519974802, 3, 0, 0, 1);

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int(12) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类名称',
  `alias` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类关键字',
  `tags` varchar(2550) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `banner` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `poster` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `def_thumb` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `desc` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类描述',
  `order` int(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '排序',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, '专业技术', 'skill', '程序员的世界', 'html,css,javascript,php', 'http://www.qianlin.com/upload/category/banner1.jpeg', 'http://www.qianlin.com/upload/category/poster1.jpeg', 'http://www.qianlin.com/upload/category/thumb1.jpeg', '十年生死两茫茫，写程序，到天亮。 千行代码，Bug何处藏；<br />\n纵使上线又怎样，朝令改，夕断肠；<br />\n领导每天新想法，天天改，日日忙；<br />\n相顾无言，惟有泪千行；<br />\n每晚灯火阑珊处，程序员，又加班，工作狂。', 1);
INSERT INTO `category` VALUES (2, '音乐天堂', 'music', '音乐如同有生命', '轻音乐,华语,外语', 'http://www.qianlin.com/upload/category/banner2.jpeg', 'http://www.qianlin.com/upload/category/poster2.jpeg', 'http://www.qianlin.com/upload/category/thumb2.jpeg', '喜欢一首曲子，是因为曲子触动了我的灵魂，影响了我的情绪；<br />\n它好像印证了我心中的倔强的伤和微微的笑；<br />\n我的眼泪、我的幸福、我的沉默、我的梦想、我的思念；<br />\n一切的一切，它好像都明白。', 2);
INSERT INTO `category` VALUES (3, '生活旅行', 'journey', '灵魂在路上', '生活,旅行', 'http://www.qianlin.com/upload/category/banner3.jpeg', 'http://www.qianlin.com/upload/category/poster3.jpeg', 'http://www.qianlin.com/upload/category/thumb3.jpeg', '人生至少要有两次冲动，一为奋不顾身的爱情，一为说走就走的旅行。<br />\r\n在年轻的时候，多走几步路，多欣赏下沿途的风景，不要急于抵达目的地而错过了流年里温暖的人和物。', 3);
INSERT INTO `category` VALUES (4, '心情日记', 'diary', '留住那一抹回忆', '', 'http://www.qianlin.com/upload/category/banner4.jpeg', 'http://www.qianlin.com/upload/category/poster4.jpeg', 'http://www.qianlin.com/upload/category/thumb4.jpeg', '一座城，一个人，一张网页；<br />\r\n记录着平凡的事迹；<br />\r\n描绘着多彩的世界；<br />\r\n书写着对你的思念。', 4);

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `userid` int(11) NOT NULL COMMENT '用户名',
  `recommend` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论',
  `replies` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '回复',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config
-- ----------------------------
DROP TABLE IF EXISTS `config`;
CREATE TABLE `config`  (
  `id` int(12) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '配置名',
  `type` tinyint(1) NOT NULL DEFAULT 1,
  `val` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '字段名',
  `order` tinyint(3) UNSIGNED NOT NULL COMMENT '排序',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config
-- ----------------------------
INSERT INTO `config` VALUES (1, '网站标题', 1, '千霖的博客', 1);
INSERT INTO `config` VALUES (2, '访问量', 2, '0', 2);
INSERT INTO `config` VALUES (3, '系统版本', 1, 'v-1.0', 3);

-- ----------------------------
-- Table structure for ip
-- ----------------------------
DROP TABLE IF EXISTS `ip`;
CREATE TABLE `ip`  (
  `id` int(12) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ip` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `cate_id` int(12) UNSIGNED NOT NULL,
  `article_id` int(12) UNSIGNED NOT NULL,
  `view_time` varchar(12) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of ip
-- ----------------------------
INSERT INTO `ip` VALUES (1, '127.0.0.1', 1, 5, '1521554683');
INSERT INTO `ip` VALUES (2, '127.0.0.1', 1, 4, '1521554849');
INSERT INTO `ip` VALUES (3, '127.0.0.1', 1, 3, '1520838746');
INSERT INTO `ip` VALUES (4, '127.0.0.1', 1, 2, '1521556842');
INSERT INTO `ip` VALUES (5, '127.0.0.1', 1, 1, '1520838754');

-- ----------------------------
-- Table structure for links
-- ----------------------------
DROP TABLE IF EXISTS `links`;
CREATE TABLE `links`  (
  `id` int(12) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '链接名称',
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '链接描述',
  `url` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '链接地址',
  `logo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '图标类名',
  `order` tinyint(3) UNSIGNED NOT NULL DEFAULT 0 COMMENT '链接排序',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of links
-- ----------------------------
INSERT INTO `links` VALUES (1, '百度', '', 'https://www.baidu.com', 'http://www.qianlin.com/upload/logo/logo1.png', 1);
INSERT INTO `links` VALUES (2, '新浪', '', 'http://news.sina.com.cn', 'http://www.qianlin.com/upload/logo/logo2.png', 2);
INSERT INTO `links` VALUES (3, '腾讯', '', 'http://www.qq.com', 'http://www.qianlin.com/upload/logo/logo3.png', 3);

-- ----------------------------
-- Table structure for navs
-- ----------------------------
DROP TABLE IF EXISTS `navs`;
CREATE TABLE `navs`  (
  `id` int(12) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name_en` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name_cn` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '别名',
  `path_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `order` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of navs
-- ----------------------------
INSERT INTO `navs` VALUES (1, 'Home', '首页', 'index', 1);
INSERT INTO `navs` VALUES (2, 'Skills', '专业技术', 'skills', 2);
INSERT INTO `navs` VALUES (3, 'Music', '音乐天堂', 'music', 3);
INSERT INTO `navs` VALUES (4, 'Journey', '生活旅行', 'journey', 4);
INSERT INTO `navs` VALUES (5, 'Diary', '心情日记', 'diary', 5);

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `userid` int(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
  `level` tinyint(1) NOT NULL DEFAULT 2,
  `username` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名',
  `password` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '密码',
  `sex` tinyint(1) NULL DEFAULT NULL,
  `mobile` varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `birthday` date NULL DEFAULT NULL,
  `register_time` varchar(12) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `login_time` varchar(12) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`userid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
